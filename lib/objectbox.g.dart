// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/entities/game.dart';
import 'data/entities/player.dart';
import 'data/entities/preferences.dart';
import 'data/entities/round.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3275677112749751919),
    name: 'GameEntity',
    lastPropertyId: const obx_int.IdUid(3, 2106022416997536326),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5558258013999247047),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5657056280553392794),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2106022416997536326),
        name: 'createDate',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 6834237167268557952),
        name: 'players',
        targetId: const obx_int.IdUid(2, 9083680030095837492),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 8250862366400271415),
        name: 'rounds',
        targetId: const obx_int.IdUid(4, 6118862544910749761),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 9083680030095837492),
    name: 'PlayerEntity',
    lastPropertyId: const obx_int.IdUid(3, 1442686348130381836),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7257477530103836099),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3407368536867903894),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1442686348130381836),
        name: 'color',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 7914021761693517881),
    name: 'PreferencesEntity',
    lastPropertyId: const obx_int.IdUid(3, 6219361135751725001),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6961114608435299990),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5927784811819739754),
        name: 'themeMode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6219361135751725001),
        name: 'language',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 6118862544910749761),
    name: 'RoundEntity',
    lastPropertyId: const obx_int.IdUid(3, 3213534649559015225),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8852772319347164553),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4103108070283966812),
        name: 'index',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3213534649559015225),
        name: 'dbSavePlayerByScores',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(4, 6118862544910749761),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(2, 8250862366400271415),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    GameEntity: obx_int.EntityDefinition<GameEntity>(
      model: _entities[0],
      toOneRelations: (GameEntity object) => [],
      toManyRelations: (GameEntity object) => {
        obx_int.RelInfo<GameEntity>.toMany(1, object.id): object.players,
        obx_int.RelInfo<GameEntity>.toMany(2, object.id): object.rounds,
      },
      getId: (GameEntity object) => object.id,
      setId: (GameEntity object, int id) {
        object.id = id;
      },
      objectToFB: (GameEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addInt64(2, object.createDate.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final object = GameEntity(
          id: idParam,
          name: nameParam,
          createDate: createDateParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<GameEntity>(
          object.players,
          store,
          obx_int.RelInfo<GameEntity>.toMany(1, object.id),
        );
        obx_int.InternalToManyAccess.setRelInfo<GameEntity>(
          object.rounds,
          store,
          obx_int.RelInfo<GameEntity>.toMany(2, object.id),
        );
        return object;
      },
    ),
    PlayerEntity: obx_int.EntityDefinition<PlayerEntity>(
      model: _entities[1],
      toOneRelations: (PlayerEntity object) => [],
      toManyRelations: (PlayerEntity object) => {},
      getId: (PlayerEntity object) => object.id,
      setId: (PlayerEntity object, int id) {
        object.id = id;
      },
      objectToFB: (PlayerEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addInt64(2, object.color);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final colorParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final object = PlayerEntity(
          id: idParam,
          name: nameParam,
          color: colorParam,
        );

        return object;
      },
    ),
    PreferencesEntity: obx_int.EntityDefinition<PreferencesEntity>(
      model: _entities[2],
      toOneRelations: (PreferencesEntity object) => [],
      toManyRelations: (PreferencesEntity object) => {},
      getId: (PreferencesEntity object) => object.id,
      setId: (PreferencesEntity object, int id) {
        object.id = id;
      },
      objectToFB: (PreferencesEntity object, fb.Builder fbb) {
        final themeModeOffset = fbb.writeString(object.themeMode);
        final languageOffset = fbb.writeString(object.language);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, themeModeOffset);
        fbb.addOffset(2, languageOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final themeModeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final languageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = PreferencesEntity(
          id: idParam,
          themeMode: themeModeParam,
          language: languageParam,
        );

        return object;
      },
    ),
    RoundEntity: obx_int.EntityDefinition<RoundEntity>(
      model: _entities[3],
      toOneRelations: (RoundEntity object) => [],
      toManyRelations: (RoundEntity object) => {},
      getId: (RoundEntity object) => object.id,
      setId: (RoundEntity object, int id) {
        object.id = id;
      },
      objectToFB: (RoundEntity object, fb.Builder fbb) {
        final dbSavePlayerByScoresOffset = object.dbSavePlayerByScores == null
            ? null
            : fbb.writeString(object.dbSavePlayerByScores!);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.index);
        fbb.addOffset(2, dbSavePlayerByScoresOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final indexParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final object = RoundEntity(id: idParam, index: indexParam)
          ..dbSavePlayerByScores = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 8);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [GameEntity] entity fields to define ObjectBox queries.
class GameEntity_ {
  /// See [GameEntity.id].
  static final id = obx.QueryIntegerProperty<GameEntity>(
    _entities[0].properties[0],
  );

  /// See [GameEntity.name].
  static final name = obx.QueryStringProperty<GameEntity>(
    _entities[0].properties[1],
  );

  /// See [GameEntity.createDate].
  static final createDate = obx.QueryDateProperty<GameEntity>(
    _entities[0].properties[2],
  );

  /// see [GameEntity.players]
  static final players = obx.QueryRelationToMany<GameEntity, PlayerEntity>(
    _entities[0].relations[0],
  );

  /// see [GameEntity.rounds]
  static final rounds = obx.QueryRelationToMany<GameEntity, RoundEntity>(
    _entities[0].relations[1],
  );
}

/// [PlayerEntity] entity fields to define ObjectBox queries.
class PlayerEntity_ {
  /// See [PlayerEntity.id].
  static final id = obx.QueryIntegerProperty<PlayerEntity>(
    _entities[1].properties[0],
  );

  /// See [PlayerEntity.name].
  static final name = obx.QueryStringProperty<PlayerEntity>(
    _entities[1].properties[1],
  );

  /// See [PlayerEntity.color].
  static final color = obx.QueryIntegerProperty<PlayerEntity>(
    _entities[1].properties[2],
  );
}

/// [PreferencesEntity] entity fields to define ObjectBox queries.
class PreferencesEntity_ {
  /// See [PreferencesEntity.id].
  static final id = obx.QueryIntegerProperty<PreferencesEntity>(
    _entities[2].properties[0],
  );

  /// See [PreferencesEntity.themeMode].
  static final themeMode = obx.QueryStringProperty<PreferencesEntity>(
    _entities[2].properties[1],
  );

  /// See [PreferencesEntity.language].
  static final language = obx.QueryStringProperty<PreferencesEntity>(
    _entities[2].properties[2],
  );
}

/// [RoundEntity] entity fields to define ObjectBox queries.
class RoundEntity_ {
  /// See [RoundEntity.id].
  static final id = obx.QueryIntegerProperty<RoundEntity>(
    _entities[3].properties[0],
  );

  /// See [RoundEntity.index].
  static final index = obx.QueryIntegerProperty<RoundEntity>(
    _entities[3].properties[1],
  );

  /// See [RoundEntity.dbSavePlayerByScores].
  static final dbSavePlayerByScores = obx.QueryStringProperty<RoundEntity>(
    _entities[3].properties[2],
  );
}
